#!/usr/bin/env python3
import subprocess
import json
import os
import argparse

def run_command(command, timeout=None):
    """Executes a shell command with a timeout."""
    try:
        result = subprocess.run(command, shell=True, timeout=timeout, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' failed with {e}")
        return None
    except subprocess.TimeoutExpired:
        print(f"Command '{command}' timed out")
        return None

def scan_with_nmap(target):
    """Scans the target for the 20 most common vulnerable ports using nmap."""
    # List of commonly exploited ports, might need adjustment based on current vulnerabilities
    ports = "21,22,23,25,53,80,110,135,139,443,445,1433,1723,3306,3389,5900,6346,8080,8443,20034"
    
    # Nmap command to scan specific ports with service version detection
    nmap_cmd = f"nmap -sV -Pn -p {ports} {target} -oX -"
    output = run_command(nmap_cmd)
    if output:
        try:
            return json.loads(json.dumps(xmltodict.parse(output)['nmaprun']))
        except Exception as e:
            print(f"Error parsing nmap output: {e}")
    return None

def capture_traffic_with_tcpdump(target):
    """Captures network traffic to/from the target to detect any active scans or connections."""
    # Start tcpdump to capture traffic for 30 seconds
    tcpdump_cmd = f"sudo tcpdump -i any host {target} -w /tmp/{target}_capture.pcap -G 30 -W 1"
    run_command(tcpdump_cmd)

def test_ports_with_netcat(target, ports):
    """Attempts to connect to each of the vulnerable ports to check if they are truly open."""
    open_ports = []
    for port in ports:
        nc_cmd = f"nc -z -v -w5 {target} {port}"
        output = run_command(nc_cmd)
        if output and "succeeded" in output.lower():
            open_ports.append(port)
    return open_ports

def main():
    parser = argparse.ArgumentParser(description="Network Scanner using nmap, tcpdump, and netcat")
    parser.add_argument("target", help="The target IP or hostname to scan")
    args = parser.parse_args()

    # Ensure necessary tools are installed
    required_tools = ['nmap', 'tcpdump', 'nc', 'xmltodict']
    for tool in required_tools:
        if not subprocess.call(f"which {tool}", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0:
            print(f"Error: {tool} is not installed or not in PATH.")
            return

    # Scan with Nmap
    nmap_results = scan_with_nmap(args.target)
    if nmap_results:
        print("Nmap Scan Results:")
        for host in nmap_results.get('host', []):
            ports = host.get('ports', {}).get('port', [])
            for port in ports:
                print(f"  - Port: {port['@portid']}, State: {port['state']['@state']}, Service: {port.get('service', {}).get('@name')}")

        # Extract ports that are open
        open_ports = [port['@portid'] for port in ports if port['state']['@state'] == 'open']

        # Capture traffic
        capture_traffic_with_tcpdump(args.target)
        print("Network traffic captured for 30 seconds. File saved as /tmp/{args.target}_capture.pcap")

        # Test open ports with netcat for confirmation
        confirmed_open = test_ports_with_netcat(args.target, open_ports)
        print("Netcat Port Confirmation:")
        for port in confirmed_open:
            print(f"  - Port {port} is confirmed open")

if __name__ == "__main__":
    main()